{"name":"element-selector","tagline":"Use mouse to select elements on the screen ","body":"# Element Selector\r\n\r\n  Select DOM elements with the mouse.\r\n\r\n## Installation\r\n\r\n```\r\n$ component install timoxley/element-selector\r\n```\r\n\r\n## Example\r\n\r\n```js\r\nvar ElementSelector = require('element-selector');\r\nvar elementSelector = ElementSelector();\r\n\r\n```\r\n\r\n\r\n## Options\r\n  - [selector](#selector)\r\n  - [selectEvent](#selectEvent)\r\n  - [selectedClass](#selectedClass)\r\n  - [highlightedClass](#highlightedClass)\r\n  - [useDefaultStyles](#useDefaultStyles)\r\n \r\n<a name=\"selector\" />\r\n### selector\r\nOnly trigger select/highlight events on elements matching this selector.\r\nDefaults to `body *`.\r\n```js\r\n// Only trigger on paragraphs inside #content\r\nvar elementSelector = ElementSelector({\r\n  selector: \"#content p\"\r\n})\r\n```\r\n\r\n<a name=\"selectEvent\" />\r\n### selectEvent \r\nMouse event to trigger selection. Must be one of `click`, `dblclick`,\r\n`mouseup` or `mousedown`. Defaults to `click`\r\n```js\r\n// Trigger on 'mousedown' instead of 'click'\r\nvar elementSelector = ElementSelector({\r\n  selectEvent: \"mousedown\"\r\n})\r\n```\r\n\r\n<a name=\"selectedClass\" />\r\n### selectedClass\r\n```js\r\n// elements will get class \"editable\" when they are highlighted \r\nvar elementSelector = ElementSelector({\r\n  highlightedClass: \"editable\"\r\n})\r\n```\r\n\r\n<a name=\"highlightedClass\" />\r\n### highlightedClass\r\n```js\r\n// elements will get class \"glow\" when they are highlighted\r\nvar elementSelector = ElementSelector({\r\n  highlightedClass: \"glow\"\r\n})\r\n```\r\n\r\n<a name=\"useDefaultStyles\" />\r\n### useDefaultStyles\r\nDisable this if you wish to disable the default styles.\r\nAdds `element-selector` class to `document.body` if `true`.\r\nDefaults to `true`.\r\n\r\n```js\r\n// Disable default styles so you can\r\n// use custom .selected and .highlighted css.\r\nvar elementSelector = ElementSelector({\r\n  useDefaultStyles: false\r\n})\r\n```\r\n\r\n## Events\r\n\r\nEvents are fired whenever an element's selected or highlighted status\r\nchanges. Two arguments are passed to the callback: the element that was highlighted\r\nor selected, and the original mouse event that triggered the action (if\r\nit exists). The second event argument is supplied if you wish to\r\nprevent default actions or otherwise query the triggering event.\r\n\r\nEvents will be one of the following:\r\n\r\n  - select\r\n  - deselect\r\n  - highlight\r\n  - dehighlight\r\n\r\n\r\nElementSelector's event API is inherited from\r\n[component/emitter](https://github.com/component/emitter).\r\n\r\n### Example\r\n\r\n```js\r\n\r\nelementSelector.on('select', function(el, event) {\r\n  event.preventDefault()\r\n  console.log('element selected', el)\r\n})\r\n\r\nelementSelector.once('dehighlight', function(el) {\r\n  console.log('element dehighlighted', el)\r\n})\r\n\r\n```\r\n\r\n## API\r\n\r\n  - [disable](#disable)\r\n  - [enable](#enable)\r\n\r\n<a name=\"disable\" />\r\n### disable()\r\nDisables the elementSelector instance. No more events will be fired, other\r\nthan those to deselect/dehighlight the currently selected/highlighted\r\nelements.\r\n\r\n```\r\n  elementSelector.disable()\r\n```\r\n\r\n<a name=\"enable\" />\r\n### enable()\r\nReenables a elementSelector instance.\r\n\r\n```\r\n  elementSelector.enable()\r\n```\r\n\r\n## Compatibility\r\n\r\n  Only tested in Chrome. Pull request welcome if you get it working in IE.\r\n\r\n\r\n## License\r\n\r\n[MIT](http://opensource.org/licenses/mit-license.php)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}